script.
  function calculateAndSetProcessingTimeData(){
    var csrf = '#{_csrf}'

    var mediaUniqueTag = '#{upload.uniqueTag}'

    var channelUrl = '#{upload.uploader.channelUrl}'

    var data = {
      _csrf: csrf,
      uniqueTag: mediaUniqueTag,
      channelUrl
    }

    var estimatedProcessingTimeLeft = null;
    var processingStartTime = null

    $.ajax({
      type: 'POST',
      url: `/user/${channelUrl}/${mediaUniqueTag}/progress`,
      data,
      success: function (data) {
        console.log(data);
        processingStartTime = !processingStartTime ? new Date() : null;

        estimatedProcessingTimeLeft = Number(data.conversionTimeLeft);
        setIntervalX(() => {
          if (estimatedProcessingTimeLeft) estimatedProcessingTimeLeft -= 1
          var secondsToFormattedTime = #{secondsToFormattedTime};

          var secondsElapsed = processingStartTime ? Math.round((new Date() - processingStartTime) / 1000) : null;

          var formattedSecondsElapsed = secondsElapsed && secondsToFormattedTime(secondsElapsed)
          var formattedEstimatedProcessingTimeLeft = estimatedProcessingTimeLeft && secondsToFormattedTime(estimatedProcessingTimeLeft)
          var formattedEstimatedTotalProcessingTime = secondsToFormattedTime(estimatedProcessingTimeLeft + secondsElapsed)

          $('#processingTimeElapsed').text(`Time elapsed: ${formattedSecondsElapsed ? formattedSecondsElapsed : "calculating ..."}`)

          $('#estimatedProcessingTimeLeft').text(`Estimated time to completion: ${formattedEstimatedProcessingTimeLeft ? formattedEstimatedProcessingTimeLeft : "calculating ..."}`);

          $('#estimatedTotalProcessingTime').text(`Total estimated conversion time: ${formattedEstimatedTotalProcessingTime ? formattedEstimatedTotalProcessingTime : "calculating ..."}`)

        }, 1000 * 1, 7 - 1)

        // Shows undefined when at 100%
        $('#processing').text(`Your upload is currently ${data.conversionProgress !== undefined ? data.conversionProgress : 100}% done being processed`);

        if(parseInt(data) == 100){
          location.reload();
        }

      },
      error: function (err) {
        console.log(err);
      }
    });
  }

  function setIntervalX(callback, delay, repetitions) {
    var x = 0;
    var intervalId = window.setInterval(function () {

        callback();

        if (++x === repetitions) {
            window.clearInterval(intervalId);
        }
    }, delay);
  }

  calculateAndSetProcessingTimeData();
  setInterval(calculateAndSetProcessingTimeData, 1000 * 7)